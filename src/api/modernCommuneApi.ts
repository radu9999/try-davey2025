/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * ModernCommune.Api
 * OpenAPI spec version: 1.0
 */
import { mutator } from "../utils/mutator";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export type GetMemberQuizParams = {
  categoryId?: number;
};

export type GetMemberQuestionsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberPointsParams = {
  type?: string;
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberNotificationsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
  isRead?: boolean;
};

export type GetMemberLevelsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberInventoryParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberEventsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberCommissionParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberCharitiesParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberChallengesParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberBrandsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberBadgesParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export type GetMemberBoardRoomsParams = {
  Filter?: string;
  Page?: number;
  PerPage?: number;
  SortBy?: string;
  SortDirection?: string;
};

export interface UserLogin {
  password?: string | null;
  userName?: string | null;
}

export interface UserRegister {
  email: string;
  firstName?: string;
  lastName?: string;
  alias?: string;
  password: string;
  confirmPassword?: string;
  country?: string;
  address?: string;
  unit?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  phone: string;
  isPhoneVerification: boolean;
  notifications: boolean[];
  terms?: boolean;
  promoCode?: string;
  isUserCheck?: boolean;
  isAlert?: boolean;
};

export interface TimeSpan {
  readonly days?: number;
  readonly hours?: number;
  readonly microseconds?: number;
  readonly milliseconds?: number;
  readonly minutes?: number;
  readonly nanoseconds?: number;
  readonly seconds?: number;
  ticks?: number;
  readonly totalDays?: number;
  readonly totalHours?: number;
  readonly totalMicroseconds?: number;
  readonly totalMilliseconds?: number;
  readonly totalMinutes?: number;
  readonly totalNanoseconds?: number;
  readonly totalSeconds?: number;
}

export interface UserToken {
  expiredTime?: string;
  id?: number;
  level?: string | null;
  memberId?: number;
  memberName?: string | null;
  refreshToken?: string | null;
  token?: string | null;
  userName?: string | null;
  validity?: TimeSpan;
}

export interface TaskCard {
  description?: string | null;
  id?: number;
  itemCount?: number;
  itemsCompleted?: number;
}

export interface ShortAddress {
  city?: string | null;
  country?: string | null;
  id?: number;
  postalCode?: string | null;
  state?: string | null;
  street?: string | null;
  unit?: string | null;
}

export type QuizResult = (typeof QuizResult)[keyof typeof QuizResult];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuizResult = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_128: 128,
  NUMBER_256: 256,
} as const;

export interface QuizQuestion {
  allottedTime?: number;
  categoryId?: number;
  categoryName?: string | null;
  choice1?: string | null;
  choice2?: string | null;
  choice3?: string | null;
  choice4?: string | null;
  choice5?: string | null;
  choice6?: string | null;
  choice7?: string | null;
  choice8?: string | null;
  readonly choices?: readonly string[] | null;
  correctAnswer?: number;
  createdAt?: string;
  creditRewardQuantity?: number;
  creditRewardType?: CreditType;
  deletedAt?: string | null;
  disputeComments?: string | null;
  id?: number;
  readonly isDeleted?: boolean;
  memberAnswer?: number;
  modifiedAt?: string | null;
  questionId?: number;
  questionText?: string | null;
  result?: QuizResult;
  rewardDescription?: string | null;
  rowVersion?: string | null;
  thumbnail?: string | null;
}

export interface QuestionCard {
  correctAnswer?: string | null;
  dateAnswered?: string;
  dateDisputed?: string;
  dateResolved?: string;
  disputedComment?: string | null;
  id?: number;
  memberAnswer?: string | null;
  questionId?: string | null;
  questionText?: string | null;
  resolvedComment?: string | null;
  rewardDescription?: string | null;
  status?: string | null;
}

export interface QuestionCardListResponse {
  filter?: string | null;
  items?: QuestionCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface ProblemDetails {
  detail?: string | null;
  instance?: string | null;
  status?: number | null;
  title?: string | null;
  type?: string | null;
  [key: string]: unknown;
}

export interface PointCard {
  amount?: number;
  availableDate?: string | null;
  description?: string | null;
  id?: number;
  pointType?: string | null;
  status?: string | null;
  transactionDate?: string;
  transactionType?: string | null;
}

export interface PointCardList {
  currentBalance?: number;
  filter?: string | null;
  items?: PointCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface MemberProfile {
  address?: ShortAddress;
  badgeAwards?: AwardCard[] | null;
  challengeAwards?: AwardCard[] | null;
  email?: string | null;
  firstName?: string | null;
  id?: number;
  lastName?: string | null;
  level?: AwardCard;
  phone?: string | null;
  phoneIsMobile?: boolean;
  promoCode?: string | null;
  username?: string | null;
}

export interface MemberNotification {
  comment?: string | null;
  createdAt?: string;
  deletedAt?: string | null;
  id?: number;
  readonly isDeleted?: boolean;
  isImportant?: boolean;
  isRead?: boolean;
  memberId?: number;
  modifiedAt?: string | null;
  rowVersion?: string | null;
  subject?: string | null;
}

export interface MemberNotificationListResponse {
  filter?: string | null;
  items?: MemberNotification[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface LevelCard {
  commissionRate?: string | null;
  id?: number;
  imageUri?: string | null;
  name?: string | null;
  taskCount?: number;
  tasks?: TaskCard[] | null;
  tasksCompleted?: number;
  xpRange?: string | null;
}

export interface LevelCardListResponse {
  filter?: string | null;
  items?: LevelCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface InventoryCard {
  creditType?: string | null;
  dateReceived?: string;
  id?: number;
  name?: string | null;
  quantity?: number;
  couponCode?: number;
  redeemed?: boolean;
}

export interface InventoryCardListResponse {
  filter?: string | null;
  items?: InventoryCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface EventCard {
  description?: string | null;
  effectiveDate?: string | null;
  eventDate?: string;
  eventType?: string | null;
  id?: number;
  quantity?: number;
}

export interface EventCardListResponse {
  filter?: string | null;
  items?: EventCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export type CreditType = (typeof CreditType)[keyof typeof CreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_4: 4,
  NUMBER_8: 8,
} as const;

export interface CommissionCard {
  amount?: number;
  availableDate?: string | null;
  description?: string | null;
  id?: number;
  status?: string | null;
  transactionDate?: string;
  transactionType?: string | null;
}

export interface CommissionCardList {
  currentBalance?: number;
  filter?: string | null;
  items?: CommissionCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface CharityCard {
  description?: string | null;
  id?: number;
  imageUri?: string | null;
  name?: string | null;
  website?: string | null;
}

export interface CharityBalance {
  minimumDonation?: number;
  commissionBalance?: number;
}

export interface CharityCardListResponse {
  filter?: string | null;
  items?: CharityCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface ChallengeCard {
  id?: number;
  imageUri?: string | null;
  name?: string | null;
  objective?: string | null;
  reward?: string | null;
  taskCount?: number;
  tasks?: TaskCard[] | null;
  tasksCompleted?: number;
}

export interface ChallengeCardListResponse {
  filter?: string | null;
  items?: ChallengeCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface BrandCard {
  address?: ShortAddress;
  contactEmail?: string | null;
  contactName?: string | null;
  contactPhone?: string | null;
  description?: string | null;
  id?: number;
  imageUri?: string | null;
  name?: string | null;
  website?: string | null;
}

export interface BrandCardListResponse {
  filter?: string | null;
  items?: BrandCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface BadgeCard {
  id?: number;
  imageUri?: string | null;
  name?: string | null;
  objective?: string | null;
  reward?: string | null;
  taskCount?: number;
  tasks?: TaskCard[] | null;
  tasksCompleted?: number;
}

export interface BadgeCardListResponse {
  filter?: string | null;
  items?: BadgeCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface BoardCardListResponse {
  filter?: string | null;
  items?: BoardCard[] | null;
  page?: number;
  pageCount?: number;
  perPage?: number;
  resultCount?: number;
  sortBy?: string | null;
  sortDirection?: string | null;
}

export interface AwardCard {
  awardType?: string | null;
  id?: number;
  imageUri?: string | null;
  name?: string | null;
}

export interface BoardCard {
  id?: number;
  name?: string | null;
  description?: string | null;
  videoUri?: string | null;
  tags?: string | null;
  createdAt?: string;
  modifiedAt?: string;
}

export interface MonthBalance {
  month: string;
  balance: number;
}

export interface CommissionBalance {
  totalBalance?: number;
  currentRate?: number;
  prevSixMonthBalanceList?: MonthBalance[] | null;
  lastMonthBalance?: number;
  currentMonthBalance?: number;
}

export interface PendingCommissionInfo {
  description: string;
  amount: number;
  availableDate: string;
}

export interface PendingCommission {
  pendingCommissions?: number;
  pendingCommissionInfoList?: PendingCommissionInfo[] | null;
}

export interface SalesInfo {
  salesQuantity?: number;
  salesValue?: number;
  totalSalesQuantity?: number;
  totalSalesValue?: number;
  count?: number;
  ranking?: number;
}

export interface Curriculum {
  questionCount?: number;
  totalXP?: number;
  itemCount?: number;
}

export type LeaderBoardParams = {
  timeOption: string;
  cateNum: number;
};

export type LeaderBoard = {
  member?: string;
  totalAmount?: string;
};

export const postMemberLogin = (userLogin: UserLogin) => {
  return mutator<UserToken>({
    url: `/member/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userLogin,
  });
};

export const getMemberBadges = (params?: GetMemberBadgesParams) => {
  return mutator<BadgeCardListResponse>({
    url: `/member/badges`,
    method: "GET",
    params,
  });
};

export const getMemberBrands = (params?: GetMemberBrandsParams) => {
  return mutator<BrandCardListResponse>({
    url: `/member/brands`,
    method: "GET",
    params,
  });
};

export const getMemberBoardRooms = (params?: GetMemberBoardRoomsParams) => {
  return mutator<BoardCardListResponse>({
    url: `/member/videolinks`,
    method: "GET",
    params,
  });
};

export const getMemberChallenges = (params?: GetMemberChallengesParams) => {
  return mutator<ChallengeCardListResponse>({
    url: `/member/challenges`,
    method: "GET",
    params,
  });
};

export const getMemberCharities = (params?: GetMemberCharitiesParams) => {
  return mutator<CharityCardListResponse>({
    url: `/member/charities`,
    method: "GET",
    params,
  });
};

export const getMemberCommission = (params?: GetMemberCommissionParams) => {
  return mutator<CommissionCardList>({
    url: `/member/commission`,
    method: "GET",
    params,
  });
};

export const getMemberEvents = (params?: GetMemberEventsParams) => {
  return mutator<EventCardListResponse>({
    url: `/member/events`,
    method: "GET",
    params,
  });
};

export const getMemberInventory = (params?: GetMemberInventoryParams) => {
  return mutator<InventoryCardListResponse>({
    url: `/member/inventory`,
    method: "GET",
    params,
  });
};

export const getMemberLevels = (params?: GetMemberLevelsParams) => {
  return mutator<LevelCardListResponse>({
    url: `/member/levels`,
    method: "GET",
    params,
  });
};

export const getMemberProfile = () => {
  return mutator<MemberProfile>({ url: `/member/profile`, method: "GET" });
};

export const putMemberProfile = (memberProfile: MemberProfile) => {
  return mutator<MemberProfile>({
    url: `/member/profile`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: memberProfile,
  });
};

export const postMemberProfile = (memberProfile: MemberProfile) => {
  return mutator<MemberProfile>({
    url: `/member/profile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: memberProfile,
  });
};

export const getMemberNotifications = (
  params?: GetMemberNotificationsParams
) => {
  return mutator<MemberNotificationListResponse>({
    url: `/member/notifications`,
    method: "GET",
    params,
  });
};

export const postMemberNotifications = (
  memberNotification: NonReadonly<MemberNotification>
) => {
  return mutator<MemberNotification>({
    url: `/member/notifications`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: memberNotification,
  });
};

export const getMemberNotificationsId = (id: number) => {
  return mutator<MemberNotification>({
    url: `/member/notifications/${id}`,
    method: "GET",
  });
};

export const putMemberNotificationsId = (
  id: number,
  memberNotification: NonReadonly<MemberNotification>
) => {
  return mutator<MemberNotification>({
    url: `/member/notifications/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: memberNotification,
  });
};

export const deleteMemberNotificationsId = (id: number) => {
  return mutator<void>({
    url: `/member/notifications/${id}`,
    method: "DELETE",
  });
};

export const getMemberPoints = (params?: GetMemberPointsParams) => {
  return mutator<PointCardList>({
    url: `/member/points`,
    method: "GET",
    params,
  });
};

export const getMemberQuestions = (params?: GetMemberQuestionsParams) => {
  return mutator<QuestionCardListResponse>({
    url: `/member/questions`,
    method: "GET",
    params,
  });
};

export const getMemberQuiz = (params?: GetMemberQuizParams) => {
  return mutator<QuizQuestion[]>({
    url: `/member/quiz`,
    method: "GET",
    params,
  });
};

export const putMemberQuizId = (
  id: number,
  quizQuestion: NonReadonly<QuizQuestion>
) => {
  return mutator<QuizQuestion>({
    url: `/member/quiz/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: quizQuestion,
  });
};

export const postMemberQuizId = (
  id: number,
  quizQuestion: NonReadonly<QuizQuestion>
) => {
  return mutator<QuizQuestion>({
    url: `/member/quiz/${id}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: quizQuestion,
  });
};

export const postMemberQuizReset = () => {
  return mutator<void>({ url: `/member/quiz/reset`, method: "POST" });
};

export type PostMemberLoginResult = NonNullable<
  Awaited<ReturnType<typeof postMemberLogin>>
>;
export type GetMemberBadgesResult = NonNullable<
  Awaited<ReturnType<typeof getMemberBadges>>
>;
export type GetMemberBrandsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberBrands>>
>;
export type GetMemberChallengesResult = NonNullable<
  Awaited<ReturnType<typeof getMemberChallenges>>
>;
export type GetMemberCharitiesResult = NonNullable<
  Awaited<ReturnType<typeof getMemberCharities>>
>;
export type GetMemberCommissionResult = NonNullable<
  Awaited<ReturnType<typeof getMemberCommission>>
>;
export type GetMemberEventsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberEvents>>
>;
export type GetMemberInventoryResult = NonNullable<
  Awaited<ReturnType<typeof getMemberInventory>>
>;
export type GetMemberLevelsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberLevels>>
>;
export type GetMemberProfileResult = NonNullable<
  Awaited<ReturnType<typeof getMemberProfile>>
>;
export type PutMemberProfileResult = NonNullable<
  Awaited<ReturnType<typeof putMemberProfile>>
>;
export type PostMemberProfileResult = NonNullable<
  Awaited<ReturnType<typeof postMemberProfile>>
>;
export type GetMemberNotificationsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberNotifications>>
>;
export type PostMemberNotificationsResult = NonNullable<
  Awaited<ReturnType<typeof postMemberNotifications>>
>;
export type GetMemberNotificationsIdResult = NonNullable<
  Awaited<ReturnType<typeof getMemberNotificationsId>>
>;
export type PutMemberNotificationsIdResult = NonNullable<
  Awaited<ReturnType<typeof putMemberNotificationsId>>
>;
export type DeleteMemberNotificationsIdResult = NonNullable<
  Awaited<ReturnType<typeof deleteMemberNotificationsId>>
>;
export type GetMemberPointsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberPoints>>
>;
export type GetMemberQuestionsResult = NonNullable<
  Awaited<ReturnType<typeof getMemberQuestions>>
>;
export type GetMemberQuizResult = NonNullable<
  Awaited<ReturnType<typeof getMemberQuiz>>
>;
export type PutMemberQuizIdResult = NonNullable<
  Awaited<ReturnType<typeof putMemberQuizId>>
>;
export type PostMemberQuizIdResult = NonNullable<
  Awaited<ReturnType<typeof postMemberQuizId>>
>;
export type PostMemberQuizResetResult = NonNullable<
  Awaited<ReturnType<typeof postMemberQuizReset>>
>;
